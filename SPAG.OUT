**==AA0001.FOR
C   Static channel numbers for "FAST FILES", set in MOSSBLK
      COMMON /dbchan/ icmast , icwork , icdcfa , icdcdt , idesfa(12) , 
     &                idesdt(12)
**==AA0002.FOR
C
      COMMON /dnames/ mast(25) , iwork(25) , idirc(8) , jnames(3,12) , 
     &                lendir
**==AA0003.FOR
C
C * Global.Cmn:  Holds global variables in effect throughout the entire system.
 
C# Bring 1st page to 416 words.
      INTEGER idummy
      COMMON /dumb  / idummy
 
 
C * Common / GISLog / holds those items that equal .TRUE. [1] or .FALSE. [0].
 
C# Error exits.
      LOGICAL error
C# Leave module/program.
      LOGICAL exit
C# HELP requested.
      LOGICAL help
C# Prompt type.
      LOGICAL display
      COMMON /gislog/ error , exit , help , display
 
 
C * Common / Terminal /: items that may be used to define interface mode.
 
C# Current receive rate.
      INTEGER baudr
C# Character set:  0=ASCII; 1=EBCDIC.
      INTEGER chrset
C# Echo status:  0=On/Full duplex; 1=Off/Half duplex.
      INTEGER echo
      INTEGER duplex
      COMMON /terminal/ baudr , chrset , echo
      EQUIVALENCE (duplex,echo)
 
 
C * Common / MenuSel /:  external commands available to the system.  These
C   commands should always call another program (refer to "<program name>.CMD".
 
C# Matching commands.
      INTEGER alfcmd(25)
C# Number of imbedded commands.
      INTEGER ionum
C# Command requested.
      INTEGER prgrun
      COMMON /menusel/ alfcmd , ionum , prgrun
C * Common / GISIO / contains some nice variables that can be used to open the
C   various IO files that GIS uses.  If you want to compile GIS on a system
C   that does not use the standard channels for I/O, the proper channels for
C   the operating system can be changed in GISInitVar.
 
C# Subroutine access open/close.
      INTEGER srchio
C# User input interface channel.
      INTEGER usrin
C# User output interface channel.
      INTEGER usrout
      COMMON /gisio / srchio , usrin , usrout
 
 
C * Common / GTime / contains some variables for finding out what time it is,
C   how long you've been working, etc.
 
C# Current Date/Time.
      INTEGER cdate(3) , ctime(3)
C# Initial Date/Time.
      INTEGER idate(3) , itime(3)
      COMMON /gtime / cdate , ctime , idate , itime
 
 
C * Common / MisIVar / and / MiscRVar / contain some useful vairables
C   for doing useless things.  Note:  Common / MiscCVar / is
C   primarily for equivalencing the command input area.
 
C# Starting position for main command.
      INTEGER frschr
C# Error indicator.
      INTEGER ier
C# Non-program generated commands.
      INTEGER nulcmd
C# Program generated commands.
      INTEGER numcmd
C# Index variable for returns.
      INTEGER retlbl
C# Starting position for sub command.
      INTEGER secchr
      COMMON /miscivar/ frschr , ier , nulcmd , numcmd , retlbl , secchr
 
 
C# Current version of GIS.
      REAL vrsion
      COMMON /miscrvar/ vrsion
 
 
C# Area for file name.
      CHARACTER*40 filenm
C# Program identifier.
      CHARACTER*80 whoiam
C# User input area.
      CHARACTER*80 cmdstr
C# Hold Area.
      CHARACTER*12 cmnds(20)
      INTEGER icmdfd , cstart
      COMMON /misccvar/ filenm , cmdstr , cmnds , whoiam , icmdfd , 
     &                  cstart
 
 
C# Command type.
      CHARACTER*1 ctype(60)
C# Command level.
      CHARACTER*80 level(60)
C# Command name.
      CHARACTER*80 imenu(60)
      COMMON /menucmds/ ctype , imenu , level
 
C# Version number.
      REAL rvrsn(60)
      COMMON /vernums/ rvrsn
 
 
C# Nested levels within program.
      INTEGER lvlnum
C# Misc sorting area.
      INTEGER srtara(10)
      COMMON /nest  / lvlnum , srtara
C# System call stuff
      CHARACTER*6 systuff(8)
      COMMON /sys   / systuff
C# Color codes
      COMMON /color / icolor , kcolor(40)
**==AA0004.FOR
      COMMON /gwindo/ band(3,50)
**==AA0005.FOR
      COMMON /io    / nprnt , ioin
**==AA0006.FOR
C
 
      COMMON /mapname/ name(25)
**==AA0007.FOR
      COMMON /mfast / ifbuff(256) , incore , iwtrn , ifchan
**==AA0008.FOR
      COMMON /myst  / nest , c0 , c(5) , avalu(5) , angle(5) , afh(5) , 
     &                sill , itype(5) , slope(5) , aisi(5) , bisi(5) , 
     &                cisi(5) , nt , ex(10) , ey(10) , coef(10) , 
     &                yn(5000) , xe(5000) , gd(5000) , ipt , iout , 
     &                ipr , nhol , maxh , ivib(2,99) , ilist
**==AA0009.FOR
      PARAMETER (namelen=10)
**==AA0010.FOR
      COMMON /pqpnts/ p(5000) , q(5000)
**==AA0011.FOR
      COMMON /restrt/ irestl
**==AA0012.FOR
 
      COMMON /rspnts/ r(5000) , s(5000)
**==SPOINTS.FOR
      SUBROUTINE spoints(w,array,value,sube,mode)
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c     S U B R O U T I N E  S P O I N T S
c
c   gets and distributes map coordinates via the array (array) and via
c   disk in blocks of 5000.
c
c   w     = character denoting which array to get/put (x,y,p,q,r,s,xr,yr)
c   array = array containing the most recent block of 5000 points.
c   Value = the value to either get from or put into array.
c   sube  = the external subscript for array (1 - 32700)
c   mode  = 1 = get value , 2 = put value.
c
c   subi  = the internal subscript computed via the 5000 point block
c           will be 1-5000.
c   fopen = contains unit number for open disk arrays (121-126)
c   fswap = contains character of array varaible names (x,y,p,q,r,s,xr,yr)
c   Iblock = currently accessed block # per array. Each file has two arrays
c            (x,y),(p,q),(r,s),(xr,yr),(xy(1,xy(2))
c
c cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
      CHARACTER w*2 , fswap(10)*2 , swapf(5)*2 , idrv*2
c
      COMMON /swap  / iblock(5,2) , fopen(5) , iswap(10) , subi
      COMMON /swapc / idrv , fswap , swapf
      REAL array(500)
      INTEGER sube , subi , fopen , updown
c
c   Find block and internal subscript values for incoming external subscript
c
      inow = (sube/500) + 1
      IF ( mod(sube,500).EQ.0 ) THEN
         inow = inow - 1
      ENDIF
      subi = mod(sube,500)
      IF ( subi.EQ.0 ) subi = 500
c
      DO l = 1 , 10
         IF ( w.EQ.fswap(l) ) THEN
c
c  iwhich = iswap(l) = arrray set (1-5) being worked upon
c
            iwhich = iswap(l)
            updown = mod(l,2)
            IF ( updown.EQ.1 ) THEN
               updown = 0
            ELSE
               updown = 1
            ENDIF
c
            IF ( iblock(iwhich,(updown+1)).NE.inow ) THEN
c
c
c    Different Block
c
c    Be sure file is open
c
               IF ( fopen(iwhich).EQ.0 ) THEN
c
c  Compute unit number
c
                  fopen(iwhich) = 120 + iwhich
c
                  OPEN (fopen(iwhich),ACCESS='DIRECT',STATUS='SCRATCH',
     &                  FORM='UNFORMATTED',RECL=2000,BLOCKSIZE=2000,
     &                  IOSTAT=ier)
c
                  IF ( ier.NE.0 ) THEN
                     WRITE (*,*) 'Error opening disk array' , 
     &                           swapf(iwhich) , ier
                     STOP
                  ENDIF
               ENDIF
c
c  Get or put new Block
c
c  Compute needed record numbers
c
               irecold = (iblock(iwhich,(updown+1))-1)*2 + 1 + updown
               irecnew = (inow-1)*2 + 1 + updown
c
c  Figure out if top or bottom part of block
c
               IF ( mode.EQ.2 ) THEN
c
c  PUT array away
c
                  WRITE (fopen(iwhich),REC=irecold) array
c
                  iblock(iwhich,(updown+1)) = inow
c
               ELSE
c
c  GET a new block - put current one away first
c
                  WRITE (fopen(iwhich),REC=irecold) array
c
                  READ (fopen(iwhich),REC=irecnew,IOSTAT=ier) array
c
c
                  IF ( ier.NE.0 ) THEN
                     DO k = 1 , 500
                        array(k) = 0.0
                     ENDDO
                     WRITE (*,*) ' Error reading new block ' , irecnew , 
     &                           irecold , inow , sube , subi , ier , 
     &                           fopen(iwhich) , iwhich , 
     &                           iblock(iwhich,updown+1) , updown
                  ENDIF
c
                  iblock(iwhich,(updown+1)) = inow
               ENDIF
c
c  Now that we have changed blocks - update array or value
c
               IF ( mode.EQ.1 ) THEN
                  value = array(subi)
               ELSE
                  array(subi) = value
               ENDIF
c
c   Same Block
c
c    Do value swap
c
            ELSEIF ( mode.EQ.1 ) THEN
               value = array(subi)
            ELSE
               array(subi) = value
c
            ENDIF
c
            RETURN
         ENDIF
      ENDDO
      WRITE (*,*) 'Error finding array name ' , w
      STOP
      END
**==AA0013.FOR
 
      COMMON /strng / icard(80) , icardp , lenicd
**==AA0014.FOR
      COMMON /type  / idatyp(40) , nacts
**==AA0015.FOR
      COMMON /vwnd  / xorgin , yorgin , xalen , yalen , xstart , 
     &                ystart , xlen , ylen , ibw
**==AA0016.FOR
C  Information about selected maps.
      COMMON /whmap / istrct(300) , nstrct
**==AA0017.FOR
C
      COMMON /work  / ibuff(128) , map(25) , icom(10) , jcom(10)
**==AA0018.FOR
      COMMON /xrxr  / xr(5000)
**==AA0019.FOR
 
      COMMON /xypnts/ x(5000) , y(5000)
**==AA0020.FOR
      COMMON /xyxy  / xy1(5000) , xy2(5000)
**==AA0021.FOR
 
      COMMON /yryr  / yr(5000)
