3     /01  1= pretty print only  2= pp + relabel   3= pp + relabel + restructure
72    /02  input file record length (may not exceed 136)
1     /03  1= convert computed GOTO   to block IF, 0= leave alone
1     /04  1= convert arithmetic IF   to block IF, 0= leave alone
1     /05  1= convert logical IF+GOTO to block IF, 0= leave alone
1     /06  1= allow duplication of code            0= no code duplication
0     /07  1= implied *-ASIS for all declaration statements  0= reformat
0     /08  n= preserve existing labels >=n if possible   0= complete relabel
0     /09  start number for re-labelling (except FORMAT statements)
100   /10  label increment for un-indented code
50    /11  label increment for code at indentation level 1
20    /12  label increment for code at indentation level 2
10    /13  label increment for code at indentation level 3
5     /14  label increment for code at indentation level 4
2     /15  label increment for code at indentation level 5 or higher
99000 /16  start number for re-labelling (FORMAT statements)
1     /17  FORMAT label increment
0     /18  1= relocate FORMAT statements before END statement   0=leave
1     /19  1= insert CONTINUE for labels   0= CONTINUE only as DO terminator
0     /20  reserved
1     /21  2= preserve Holleriths    1= convert " to '    0= leave alone
1     /22  case of symbolic variables (0=leave, 1=lower, 2=upper)
0     /23  case of character strings  (0=leave, 1=lower, 2=upper)
0     /24  case of comments           (0=leave, 1=lower, 2=upper)
0     /25  reserved
0     /26  reserved
0     /27  reserved
0     /28  0 = don't use tabs in output   n = use tabs (every nth column)
2     /29  label style (0=right justified column 5, n=left justified column n)
72    /30  right margin
7     /31  left  margin (for unindented code)
3     /32  indentation for each DO and block IF
42    /33  maximum left margin (for indented code)
38    /34  continuation character = CHAR(n)  (80 for EBCDIC & on IBM mainframes)
0     /35  1 for GO TO                     0 for GOTO
0     /36  1 for ELSE IF, END IF, END DO   0 for ELSEIF, ENDIF, ENDDO
0     /37  1 for BLOCK DATA                0 for BLOCKDATA
1     /38  1 for DOUBLE PRECISION          0 for DOUBLEPRECISION
2     /39  2= space after all keywords   1= space except before (   0= no space
1     /40  space either side of + and -  if <n brackets open
1     /41  space either side of =        if <n brackets open
4     /42  space either side of .AND. .OR. etc if <n brackets open
1     /43  space either side of ,        if <n brackets open (-n for after only)
0     /44  reserved
0     /45  reserved
2     /46  2= DO..ENDDO                                     1= DO..CONTINUE
1     /47  2= convert 1 statement block IF to logical IF    1= only IF ( ) GOTO
1     /48  1= for extra space inside ( ) of IF              0= no extra space
0     /49  minimum columns before = in assignment statement
0     /50  reserved
0     /51  reserved
1     /52  1= convert null IF followed by ELSE using .NOT.  0= don't convert
0     /53  reserved
1     /54  1=allow code to be re-located into a DO loop     0= don't allow it
0     /55  1=fix RETURN or STOP before END                  0= allow relocation
0     /56
0     /57
0     /58
0     /59
0     /60  debug
**==  /61  4 chars at start of header record placed before each program unit
.FOR  /62  4 char filename extension for use on header record
